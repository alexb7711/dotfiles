* HERETIC EMACS
#+title Heretic Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Aethstetics

** [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]]
A collection of good themes. Default theme is currently gruvbox.

#+begin_src emacs-lisp 

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

#+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
A fancy, easy to use status bar.

#+begin_src emacs-lisp 

  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:
  ;;
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

   (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Emacs Cleanup
Remove a bunch of the things that makes Emacs ugly.

#+begin_src emacs-lisp 

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (setq visible-bell t)

#+end_src

** Font

#+begin_src emacs-lisp 

  ;; Default Font
  (set-face-attribute 'default nil :font "Hurmit Nerd Font Mono" :height 110)

  ;; Set the fixed pitch font
  (set-face-attribute 'fixed-pitch nil :font "Hurmit Nerd Font Mono" :height 110)

  ;; Set variable pitch font
  (set-face-attribute 'fixed-pitch nil :font "Cantarell" :height 110 :weight 'regular)

#+end_src

** Line Numbers

#+begin_src emacs-lisp 

  ;; Line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for certain modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
  (add-hook mode 'disable-linum))

  ;; Disable line numbers on buffer
  (defun disable-linum ()
    (display-line-numbers-mode 0))

#+end_src

** Rainbow Delimiters
Change color of matching parenthesis so it is easier to match. May replace/add on highlighting parenthesis as well.

#+begin_src emacs-lisp 

  ;; RAINBOW DELIMITERS
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Auto Compile
Auto run the compile script asyncronously when file has been saved. Currently the compile script supports:

- `*.md`
- `*.markdown`
- `*.ps`
- `*.tex`
- `*.puml`

Note: the script is only executed when the file has been updated. Consecutive saves will only run the script once untile the buffer has been edited again.

#+begin_src emacs-lisp 

  ;; Auto Compile
  (add-hook 'after-save-hook 'compiler-script)

  ;; Compile script
  (defun compiler-script ()
    "Run compile command on currently opened buffer"
    (call-process-shell-command (concat "compile " (buffer-file-name)) nil 0))

#+end_src

* [[https://github.com/noctuid/general.el][General]] 

General provides a more convenient method for binding keys in emacs. It also allows us to use SPC and C-SPC as the leader keys for commands.

#+begin_src emacs-lisp 

  ;; Improved key bindings and allows for leader keys (SPACE)
  (use-package general
    :config
    ;  (general-evil-setup t)
      (general-create-definer heretic/leader-keys
                              :keymaps '(normal insert visual emacs)
                              :prefix "SPC"
                              :global-prefix "C-SPC"))

  (heretic/leader-keys
     "t"  '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")
     "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* [[https://github.com/Wilfred/helpful][Helpful]]
Helpful is an alternative to the built-in Emacs help menu. It provides a more rich contextual information.

#+begin_src emacs-lisp 

  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command]  . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key]      . helpful-key))

#+end_src

* [[https://github.com/abo-abo/hydra][Hydra]]
Hydra creates a menu displaying hot keys that perform a specific function. As an example, the `hydra-text-scale` function increases/decreaes font size as you press `j` or `k`.

#+begin_src emacs-lisp 

  (use-package hydra)

#+end_src

** Scale Text

#+begin_src emacs-lisp 

  (defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

#+end_src

* [[https://github.com/abo-abo/swiper][Ivy]]
Ivy is a generic completion mechanism for Emacs.

#+begin_src emacs-lisp 

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src

** Counsel
Counsel is a collection of Ivy-enhanced versions of common Emacs commands. Counsel is a part of the Ivy package.

#+begin_src emacs-lisp 

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
            ("C-x b" . counsel-ibuffer)
            ("C-x C-f" . counsel-find-file)
            :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history))
    :config
          (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

#+end_src

** [[https://github.com/Yevgnen/ivy-rich][Ivy-Rich]]
This package come swith rich transformers for commands from Ivy and Counsel.

#+begin_src emacs-lisp 

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

* Languages
** [[https://github.com/ayonga/matlab-emacs][MATLAB]]

#+begin_src emacs-lisp 

  (use-package matlab
    :ensure matlab-mode
    :config
    (add-to-list
     'auto-mode-alist
     '("\\.m\\'" . matlab-mode))
    (setq matlab-indent-function t)
    (setq matlab-shell-command "matlab"))

#+end_src

* [[https://github.com/magit/magit][Magit]]
Magit is an interface to Git.

#+begin_src emacs-lisp 

  (use-package magit)

#+end_src

** [[https://github.com/magit/forge][Force]]
Work with Git forges, such as Github and Gitlab. In other words, be able to make pull requests, address comments, etc. with Emacs and Magit.

#+begin_src emacs-lisp 

  (use-package forge)

#+end_src

* Misc
** Delete trailing whitepace
Before the file saves, delete trailing whitepace in the file.

#+begin_src emacs-lisp 

  ;; Cleanup whitespace
  (add-hook 'before-save-hook' 'delete-trailing-whitespace)

#+end_src

** Open in Zathura
Opens the file `name-of-buffer.pdf`, where name-of-buffer is the base name of the buffer currently being edited.

#+begin_src emacs-lisp 

  ;; Open current buffer in zathura 
  (global-set-key (kbd "C-c z") 'open-in-zathura)

  ;; Open current buffer and replace basename with *.pdf extention and open
  ;; in zathura
  (defun open-in-zathura ()
    "Open current buffer with zathura"
    (interactive)
    (call-process-shell-command (concat "zathura " (file-name-base) ".pdf&") nil 0))

#+end_src

* [[https://orgmode.org/][Org Mode]]
Org is a highly flexible structured plain text file format, composed of a few simple, yet versatile, structures — constructed to be both simple enough for the novice and powerful enough for the expert.

#+begin_src emacs-lisp 

  (use-package org
    :hook (org-mode . heretic/org-mode-setup)
    :config
    ;; Replace '...' with down arrrow
    (setq org-ellipsis " ▾"))

  ;; Set up org mode
  (defun heretic/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  ;; Only evaluate this after org-faces has loaded
  (general-with-eval-after-load 'org-faces
    ;; Set face heading sizes 
    (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Set fixed-pitch fonts for org mode
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil                                      :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil                                      :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil                             :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil            :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil                            :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil                             :inherit 'fixed-pitch))
#+end_src

** [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
Allows you to create and run code snippets within org mode.

The following is a [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][list of languages]] that you can add to natively (or via pluggin) to allow snippets of code to be run.

The [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] are what append the "src emacs-lisp" to all the code blocks you see in this document and will respectively append "src shell" when a shell snippet is envoked, as well as "src python" for python. To envoke one of these snippets (emacs-lisp for example), type `<el [TAB]`. 

#+begin_src emacs-lisp 

  ;; Execute code block languages
  (org-babel-do-load-languages
   'org-babel-load-language
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)

  ;; Structure templates
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

*** Auto-tangle Configuration

#+begin_src emacs-lisp

  ;;  Automatically tangle init.org config when saved
  (defun heretic/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                    (expand-file-name "~/Code/dotfiles/emacs/.emacs.d/init.org"))
  (let ((org-confirm-babel-evaluate nil))
  (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'heretic/org-babel-tangle-config)))

#+end_src

** [[https://github.com/sabof/org-bullets][Org-Bullets]]
Replace astriscs with nice bullets.

#+begin_src emacs-lisp 

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

* [[https://jwiegley.github.io/use-package/installation/][Package]]

Set up `(use-package)` package manager. 

#+begin_src emacs-lisp 

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                                                          ("org"  . "https://orgmode.org/elpa/")
                                                          ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     '("75b8719c741c6d7afa290e0bb394d809f0cc62045b93e1d66cd646907f8e6d43" default))
   '(package-selected-packages
     '(matlab-mode visual-fill-column visual-fill org-bullets evil-magit forge magit counsel-projectile counsel-projectil projectile hydra evil-collection doom-themes helpful ivy-rich which-key rainbow-delimiters counsel doom-modeline ivy use-package)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+end_src

* [[https://github.com/bbatsov/projectile][Projectile]]
Projectile is a project interaction library.

#+begin_src emacs-lisp 

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))  
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; Set paths to where you have your projects at
    (when (file-directory-p "~/Code")
      (setq projectil-project-search-path '("~/Code/")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** [[https://github.com/ericdanan/counsel-projectile][Counsel-Projectile]]
Counsel-Projectile provides further ivy integration into projectile.

#+begin_src emacs-lisp 

  (use-package counsel-projectile)
  :config (counsel-projectile-mode)

#+end_src

*  Vim Emulation

** [[https://github.com/emacs-evil/evil][ EVIL]]

Allows VIM key emulations.

#+begin_src emacs-lisp 

  ;; EVIL Mode
  (use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scrill t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'message-buffers-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

** [[https://github.com/emacs-evil/evil-collection][EVIL Collection]]

Includes a bunch of EVIL bindings to parts of Emacs that EVIL did not cover by default. This includes, but is not limited to, `help-mode`, `M-x calendar`, and Eshell.

#+begin_src emacs-lisp 

;; Better EVIL configs in other modes
(use-package evil-collection
:after evil
:config
(evil-collection-init))

#+end_src

* [[https://github.com/joostkremers/visual-fill-column][Visual Fill Column]]
Visual fill column is used to wrap text earlier than the actual buffer width.

#+begin_src emacs-lisp 

  (use-package visual-fill-column
    :hook (org-mode . heretic/org-mode-visual-fill))

  ;; Center and wrap text in org mode
  (defun heretic/org-mode-visual-fill()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

#+end_src

* [[https://github.com/justbur/emacs-which-key][Which Key]]
Which Key is a minor mode for Emacs that display the key bindings following the currently entered incomplete command. As an example press `C-x` and wait for minibuffer to pop up. It will show a list of keys and their associated actions.

#+begin_src emacs-lisp 

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.1))

#+end_src
